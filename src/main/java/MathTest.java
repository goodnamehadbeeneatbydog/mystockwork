import java.util.Arrays;
import java.util.List;

/**
 * @author Administrator
 *理论还是有问题，成功率不高，得切换模式
 *无法验证结果，失败几率太高，随即论，1/3才是很大的中奖几率，其他小成本无法多次测试
 */
public class MathTest {

    public static void main(String[] args) {
    	computeNum(2042);
    	//test("10003747");
    }

    public static void computeNum(int j){
    	//int j = 2158;
        for(int i=1;i<1000;i++){
            if(i%2!=0 && i%3!=0&&i%5!=0 &&i%7!=0){
                int m = j%i;
                int n = j/i;
                if(m<10 && n<20)
                System.out.println(i+" : "+(m)+" : "+(n));

            }
        }
    }
    public static void test(String yy){
    	String ss = "10003135;10003899;10003414;10001068;10001355;10001040;10000121;10002215;10003620;10004123;10004076;10002823;10001028;10000144;10002776;10003553;10004223;10000438;10002816;10000745;10002292;10003782;10000003;10001281;10003967;10001761;10000300;10002539;10001974;10000455;10001730;10002944;10003643;10001563;10000626;10001628;10000098;10000963;10003413;10003071;10001954;10004160;10004278;10001776;10001504;10000998;10002021;10000104;10002116;10002205;10003031;10003091;10003820;10000766;10000232;10002499;10000966;10001643;10003359;10003289;10002953;10000868;10004029;10003872;10001745;10001638;10001114;10003263;10000437;10001311;10000260;10003081;10002800;10001696;10000372;10001046;10002864;10000669;10003587;10003720;10003748;10001111;10001359;10003065;10004216;10000270;10002849;10001189;10003590;10004209;10000383;10002616;10003842;10001527;10000831;10000885;10002111;10002575;10004264;10002662;10003583;10001019;10000588;10000954;10002972;10001949;10002760;10002589;10002035;10002973;10000805;10000634;10003453;10001682;10001314;10000009;10001266;10003891;10003354;10002639;10003450;10002079;10003158;10002344;10003347;10002445;10001228;10004296;10002371;10003744;10001612;10000083;10003929;10000287;10000078;10001069;10001233;10001645;10001207;10003644;10000866;10000129;10001284;10001602;10000215;10000533;10004193;10000920;10000451;10002080;10003448;10002728;10002854;10002862;10001196;10000242;10002028;10003223;10003921;10003471;10000719;10002989;10003712;10002904;10004104;10003285;10001429;10002898;10001381;10000547;10003568;10000132;10002632;10001773;10001938;10001781;10003893;10001520;10002960;10003319;10002748;10000718;10003100;10000663;10002024;10000746;10000921;10001306;10000041;10000024;10000491;10003349;10001235;10001200;10003791;10000124;10002197;10004097;10003396;10001468;10000382;10003315;10000947;10003374;10000937;10000100;10000233;10001007;10003232;10001718;10003958;10003253;10002752;10002917;10001038;10002102;10003424;10002188;10003501;10003259;10000273;10003305;10003808;10004016;10002306;10001700;10002219;10002535;10002809;10001272;10001166;10002310;10002121;10004228;10003093;10002356;10002332;10002409;10000079;10003866;10000830;10001935;10001854;10000727;10002167;10003635;10003740;10003766;10004253;10004021;10003911;10001491;10003204;10002573;10002075;10002936;10003796;10001779;10001597;10002605;10003178;10003342;10002133;10002840;10001329;10003777;10000645;10004120;10003237;10003370;10003386;10001370;10002976;10002788;10003934;10001816;10001907;10003205;10000542;10000887;10001494;10000514;10003735;10002640;10001056;10000904;10003366;10000678;10003855;10001703;10000762;10000495;10004284;10000941;10001057;10001819;10001962;10004164;10002725;10002925;10001215;10002664;10001669;10000031;10002321;10000927;10003390;10001035;10001229;10000656;10003737;10000084;10001571;10003602;10000392;10001387;10003726;10002826;10000073;10003668;10003321;10001616;10003012;10001130;10001542;10000545;10002969;10000875;10002519;10003901;10004153;10000241;10002764;10001705;10003489;10001613;10002207;10002604;10000012;10001909;10003485;10003703;10000032;10003467;10002487;10003141;10004211;10000219;10001905;10003168;10003090;10002905;10002811;10004025;10001640;10003939;10002413;10002974;10003194;10004129;10000202;10001424;10001654;10002527;10003415;10000149;10003887;10000334;10004159";
    	   
    	List<String> list = Arrays.asList(ss.split(";"));
    	System.out.println(yy+" :: "+list.contains(yy));
    	
    	
    }
}
