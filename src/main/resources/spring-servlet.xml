<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
        http://www.springframework.org/schema/mvc 
        http://www.springframework.org/schema/mvc/spring-mvc.xsd   
    http://www.springframework.org/schema/aop 
     http://www.springframework.org/schema/aop/spring-aop-4.1.xsd"
	default-lazy-init="true">
	
	
	<!-- 开启注解 --> 
	<context:component-scan base-package="com.sl.stock" />	
	<context:annotation-config />  
	<mvc:annotation-driven />  
	
		
<!-- 
<context:annotation-config> 是用于激活那些已经在spring容器里注册过的bean
（无论是通过xml的方式还是通过package sanning的方式）上面的注解。
<context:component-scan>除了具有<context:annotation-config>的功能之外，
<context:component-scan>还可以在指定的package下扫描以及注册javabean 。

<bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter" />  
<bean class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping" />    
如果使用了<mvc:annotation-driven />， 它会自动注册DefaultAnnotationHandlerMapping 与AnnotationMethodHandlerAdapter 这两个bean,
所以就没有机会再给它注入interceptors属性，就无法指定拦截器。

 -->
	


	<!--避免IE执行AJAX时，返回JSON出现下载文件 -->
	<bean id="mappingJackson2HttpMessageConverter"
		class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>text/html;charset=UTF-8</value>
				<value>text/json;charset=UTF-8</value>
				<value>application/json;charset=UTF-8</value>
			</list>
		</property>
	</bean>
	
	<!-- 对模型视图名称的解析，即在模型视图名称添加前后缀 -->
	<!-- <bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="viewClass"
			value="org.springframework.web.servlet.view.JstlView" />
		<property name="prefix" value="/jsp"></property>
		<property name="suffix" value=".jsp"></property>
	</bean> -->
<!-- <bean 
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="viewClass"
			value="org.springframework.web.servlet.view.JstlView" />
		<property name="prefix" value="/html/"></property>
		<property name="suffix" value=".html"></property>
	</bean> -->
		
    <!-- 静态资源访问（不拦截此目录下的东西的访问） -->  
    <mvc:resources location="/img/"  mapping="/img/**" />
    <mvc:resources location="/js/"  mapping="/js/**" />        

	
	<!-- <bean
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:jdbc.properties</value>
			</list>
		</property>
	</bean>

	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<property name="driverClassName" value="${jdbc.driverClass}" />
	</bean>

	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		自动匹配Mapper映射文件
		<property name="mapperLocations" value="classpath:mappers/*/*.xml" />

		自动配置别名
		<property name="typeAliasesPackage" value="com.yao.bi.monitor.model" />
	</bean>

	通过扫描的模式，扫描目录在com.yao.bi.monitor.dao目录下，所有的mapper都继承SqlMapper接口的接口， 
		这样一个bean就可以了
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.yao.bi.monitor.dao" />
	</bean>


	事务配置
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	拦截器方式配置事物
	<tx:advice id="transactionAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="add*" propagation="REQUIRED" />
            <tx:method name="append*" propagation="REQUIRED" />
            <tx:method name="insert*" propagation="REQUIRED" />
            <tx:method name="save*" propagation="REQUIRED" />
            <tx:method name="update*" propagation="REQUIRED" />
            <tx:method name="modify*" propagation="REQUIRED" />
            <tx:method name="edit*" propagation="REQUIRED" />
            <tx:method name="delete*" propagation="REQUIRED" />
            <tx:method name="remove*" propagation="REQUIRED" />
            <tx:method name="repair" propagation="REQUIRED" />
            <tx:method name="delAndRepair" propagation="REQUIRED" />

            <tx:method name="get*"  read-only="true" />
            <tx:method name="find*"  read-only="true" />
            <tx:method name="load*"  read-only="true" />
            <tx:method name="search*"  read-only="true" />
            <tx:method name="datagrid*"  read-only="true" />
		</tx:attributes>
	</tx:advice>

	配置事务的切点,并把事务切点和事务属性不关联起来
	<aop:config>
		<aop:pointcut id="transactionPointcut"
			expression="execution(* com.yao.bi.monitor.service.*.impl.*.*(..))" />
		<aop:advisor pointcut-ref="transactionPointcut"
			advice-ref="transactionAdvice" />
	</aop:config>


	自动注入bean、初始化资源文件等
	<bean id="defaultZabbixApiApp" class="com.yao.bi.zabbix.api.DefaultZabbixApiApp">
		<property name="user" value="admin" />
		<property name="password" value="zabbix" />
		<property name="url" value="http://10.6.80.104/zabbix/api_jsonrpc.php" />
		<property name="serverName" value="host_Zabbix server" />
	</bean>
	 -->
</beans>